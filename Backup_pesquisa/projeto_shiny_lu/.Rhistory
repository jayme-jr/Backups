fun7 <- function(x, theta, p){
out <- 2*((x^(2-p))/((1-p)*(2-p)) - (x*theta^(1-p))/(1-p)
+ (theta^(2-p))/(2-p))
return(out)
}
fun7 <- Vectorize(fun7, "x")
for (i in 1:5) {
curve(fun7(x, i + 2, i/(i+1)), xlim = c(-50,50), col = i, lwd = 2 )
par(new = T)
}
for (i in 1:5) {
curve(fun7(x, i + 2, i/(i+1)), xlim = c(-50,50), ylim = c(0,40),
col = i, lwd = 2 )
par(new = T)
}
for (i in 1:5) {
curve(fun7(x, i + 2, i/(i+1)), xlim = c(-50,50), ylim = c(0,60),
col = i, lwd = 2 )
par(new = T)
}
for (i in 1:5) {
curve(fun7(x, i + 2, i/(i+1)), xlim = c(-50,50), ylim = c(0,60),
col = i, lwd = 2 )
par(new = T)
}
fun8 <- function(x, theta){
out <- 2*(1 - cos(x - theta))
return(out)
}
fun8 <- Vectorize(fun8, "x")
for(i in 1:5){
curve(fun8(x, i+2), xlim = c(-50,50), lwd = 6-i, col = 6 - i)
par(new = T)
}
for(i in 1:5){
curve(fun8(x, i+2), xlim = c(-50,50), lwd = 6-i, col = 6 - i)
par(new = T)
}
fun9 <- function(x){
out <- (sqrt(x) + x)
return(out)
}
curve(fun9(x), xlim = c(0,10), ylim = c(-2,10))
par(new = T)
plot(x = 0, y = 0, xlim = c(0,10), ylim = c(-2,10))
plot(fun9(0))
plot(fun9(0), xlim = c(0,10), ylim = c(-2,10))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10))
line(fun9(x), xlim = c(0,10), ylim = c(-2,10))
line(fun9(x))
line(fun9(seq(0,10,0.5)))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10))
line(fun9(seq(0,10,0.5)))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10))
lines(fun9(seq(0,10,0.5)))
fun10 <- function(x){
out <- x+2
return(out)
}
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(0,10,0.5)))
lines(fun10(seq(0,10,1)))
lines(fun10(seq(2,10,1)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(2,10,1)))
lines(fun10(seq(2,10,)))
lines(fun10(seq(2,10)))
lines(fun10(seq(0,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(2,10))
lines(fun10(seq(0,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(2,10))
lines(fun10(seq(0,10)))
lines(fun10(seq(2,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(2,10)))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10))
lines(fun9(seq(0,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(2,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
fun10 <- function(x){
out <- ((x^2)+x)/(x+3)
return(out)
}
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(0,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(2,10)))
plot(fun10(2), xlim = c(0,3), ylim = c(0,3))
lines(fun10(seq(2,3)))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10), asp = 1)
lines(fun9(seq(0,10)))
plot(fun9(0), xlim = c(0,10), ylim = c(0,10), asp = 2)
plot(fun9(0), xlim = c(0,10), ylim = c(0,10), asp == 1)
plot(fun9(0), xlim = c(0,10), ylim = c(0,10), asp = 0.1)
lines(fun9(seq(0,10)))
plot(fun10(2), xlim = c(0,3), ylim = c(0,3))
lines(fun10(seq(2,3)))
plot(fun10(2), xlim = c(2,10), ylim = c(0,3))
plot(fun10(2), xlim = c(0,10), ylim = c(0,3))
curve(fun10(x), xlim = c(-10,10), ylim = c(-10,10))
curve(fun10(x), xlim = c(0,10), ylim = c(0,10))
par(new = T)
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
plot(1.2, xlim = c(0,10), ylim = c(0,10))
curve(fun10(x), xlim = c(0,10), ylim = c(0,10))
par(new = T)
plot(1.2, xlim = c(0,10), ylim = c(0,10))
plot(x = -1, y = -2, xlim = c(0,10), ylim = c(0,10))
curve(fun10(x), xlim = c(0,10), ylim = c(0,10))
par(new = T)
plot(x = -1, y = -2, xlim = c(0,10), ylim = c(0,10))
curve(fun10(x), xlim = c(0,10), ylim = c(0,10))
par(new = T)
plot(x = 2, y = 1.2, xlim = c(0,10), ylim = c(0,10))
plot(fun10(2), xlim = c(0,10), ylim = c(0,3))
lines(fun10(seq(2,10)))
plot(fun10(2), xlim = c(0,10), ylim = c(0,10))
lines(fun10(seq(2,10)))
curve(fun9(x), xlim = c(0,10), ylim = c(0,10))
par(new = T)
plot(x = 0, y = 0, xlim = c(0,10), ylim = c(0,10))
cord.x <- c(-3,seq(-3,-2,0.01),-2)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal padrao')
polygon(cord.x,cord.y,col='skyblue')
plot(fun9, from = 0, to = 10)
points(0, 0, col = "black")
points(fun9(0), col = "black")
x <- 0
fx <- fun9(x)
plot(fun9, from = 0, to = 10)
points(x, fx, col = "black")
x <- 2
fx <- fun10(x)
plot(fun10, from = 0, to = 10)
points(x, fx, col = "black")
x <- 0
fx <- fun11(x)
fun11 <- function(x){
out <- x+2
return(out)
}
x <- 0
x <- 2
fx <- fun11(x)
plot(fun11, from = 0, to = 10)
points(x, fx, col = "black")
# d) f(x)=(x²-1)/(x+1), com x-> -1 o limite gera uma indeterminação,
# portanto simplificando f(x), tesos:
#   f(x) = ((x-1)*(x+1))/(x+1) = x-1
# Logo, o limite de f(x) com x->-1 = -2
fun12 <- function(x){
out <- x-1
return(out)
}
x <- -1
fx <- fun12(x)
plot(fun12, from = 0, to = 10)
points(x, fx, col = "black")
plot(fun12, from = 0, to = 10)
points(x, fx, col = "black")
plot(fun12, from = -5, to = 5)
points(x, fx, col = "black")
curve(sqrt(x), xlim = c(0,10), ylim = c(-1,10))
par(new = T)
plot(x = 0, y = 0, xlim = c(0,10), ylim = c(-1,10))
fun13 <- function(x){
out <- ((x^2) - 4)/(x-2)
return(out)
}
curve(fun12(x), xlim = c(0,10), ylim = c(-1,10))
par(new = T)
plot(x = 2, y = 4, xlim = c(0,10), ylim = c(-1,10))
y <- c(53,12.9,41.6,32.8,29,22)
fx1 <- function(y, mu){
out <- sum(((y - mu)^2)/(y * mu^2))
return(out)
}
mu <- seq(1, 20, l = 100)
pnts <- c()
for(i in 1:length(mu)){
pnts[i] <- fx1(y = y, mu = mu[i])
}
plot(pnts ~ mu, type = "l")
y2 <- c(53,12.9,41.6,32.8,29,22)
mu2<- c(23.75, 31.88, 39.40)
fx2 <- function(y, mu){
out <- sum(((y - mu)^2)/(y * mu^2))
return(out)
}
derfx2 <- function(y, mu){
out <- sum(-2 * ((y - mu) * (y * mu^2)) - 2 * (y * mu * (y - mu)^2))
return(out)
}
intercept <- c()
slope <- c()
for(i in 1:length(mu2)){
intercept[i] <- fx2(y = y, mu = mu2[i]) - (mu2[i] * (derfx2(y = y, mu = mu2[i])))
slope[i] <- derfx2(y = y, mu = mu2[i])
}
mu <- seq(1, 20, l = 100)
pnts2 <- c()
for(i in 1:length(mu)){
pnts2[i] <- fx1(y = y, mu = mu[i])
}
x11()
plot(pnts ~ mu, type = "l")
abline(intercept[1], slope[1], col = "red")
abline(intercept[2], slope[2], col = "blue")
abline(intercept[3], slope[3], col = "purple")
plot(pnts ~ mu, type = "l")
line(intercept[1], slope[1], col = "red")
plot(pnts ~ mu, type = "l")
line(intercept[1], slope[1])
line(intercept[1], slope[1])
fx2 <- function(y, mu){
out <- sum(((y - mu)^2)/(y * mu^2))
return(out)
}
derfx2 <- function(y, mu){
out <- -2 * sum(((y - mu)^2)/(y*mu^3) + (y-mu)/(y*mu^2))
return(out)
}
#reta tangente
retan <- function(y, mu){
out <- derfx2(y, mu) * (y-mu) + fx2(y, mu)
return(out)
}
mu <- seq(30, 50, l = 1000)
y2 <- c(53,12.9,41.6,32.8,29,22)
mu2<- c(23.75, 31.88, 39.40)
pnts2 <- c()
for(i in 1:length(mu)){
pnts2[i] <- fx1(y = y, mu = mu[i])
}
plot(pnts ~ mu, type = "l", main = "EX 2", ylab = "f(y, mu)")
plot(pnts2 ~ mu, type = "l", main = "EX 2", ylab = "f(y, mu)")
lines(y, retan(y = y, mu = mu2[1]), col = "red")
lines(y, retan(y = y, mu = mu2[2]), col = "blue")
lines(y, retan(y = y, mu = mu2[3]), col = "green")
mu <- seq(10, 50, l = 1000)
pnts2 <- c()
for(i in 1:length(mu)){
pnts2[i] <- fx1(y = y, mu = mu[i])
}
plot(pnts2 ~ mu, type = "l", main = "EX 2", ylab = "f(y, mu)")
lines(y, retan(y = y, mu = mu2[1]), col = "red")
lines(y, retan(y = y, mu = mu2[2]), col = "blue")
lines(y, retan(y = y, mu = mu2[3]), col = "green")
fx3 <- function(y, mu){
out <- sum(((y - mu)^2)/(y * mu^2))
return(out)
}
derfx3 <- function(y, mu){
out <- -2 * sum(((y - mu)^2)/(y*mu^3) + (y-mu)/(y*mu^2))
return(out)
}
der2fx3 <- function(y, mu){
out <- sum( (6*(y-mu)*(y-mu))/((mu^4)*y) +
(8*(y-mu)/(y*mu^3)) + 2/(y*mu^2))
return(out)
}
taylor_seq <- function(mu, mu0, y, f, f1, f2) {
out <- fx3(y = y, mu = mu0) + (mu - mu0) * derfx3(y = y, mu = mu0) +
(((mu - mu0)^2)/(2))*der2fx3(y = y, mu = mu0)
return(out)
}
y <- c(53, 12.9, 41.6, 32.8, 29, 22)
mu <- seq(10, 50, l = 1000)
fx_taylor <- taylor_seq(mu = mu, mu0 = 31.88, y = y, f, f1, f2)
fx_y <- c()
for(i in 1:length(mu)){
fx_y[i] <- fx3(mu = mu[i], y)
}
plot(fx_y ~ mu, type = "l", main = "Ex 3", xlim = c(-5,50))
lines(mu, fx_taylor, col = "red", lty = 2)
print.summary.parameters
summary.parameters
table(summary(gauss))
data(Gauss3)
gauss <- Gauss3
library("NISTnls")
library("DT")
library("shiny")
library("ggplot2")
library("plotly")
data(Gauss3)
gauss <- Gauss3
table(summary(gauss))
install.packages("kableExtra")
setwd("~/projeto_shiny_lu")
shiny::runApp('teste')
