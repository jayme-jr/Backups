xlab("") +
scale_fill_manual(values = c("<R$2000,00" = "purple", "R$2000,00~R$4000,00" = "blue",
"R$4000,00~R$6000,00" = "green", ">R$6000,00" = "yellow", "-" = "red")) +
ggtitle("Salário Imaginado") +
labs(fill = "") +
theme(plot.title = element_text(hjust = .5, face = "bold", size = 18))
data %>% count(apres)
data %>% count(fxa_et) %>%
jh
data %>% count(fxa_et)
data %>% filter(fxa_et == "26~35") %>% select(fxa_et)
data %>% count(fxa_et) %>%
ggplot(mapping = aes(fxa_et = n))+
geom_histogram(col = 6, fill = "blue", alpha = 0.3)+
geom_rug(col = 2, alpha = 0.5)
data %>% count(fxa_et) %>%
ggplot(mapping = aes(n = fxa_et))+
geom_histogram(col = 6, fill = "blue", alpha = 0.3)+
geom_rug(col = 2, alpha = 0.5)
data %>%
ggplot(aes(fxa_et))+
geom_histogram()
data %>%
ggplot(aes(fxa_et))+
geom_histogram(stat = "count")
data %>%
ggplot(aes(fxa_et))+
geom_histogram(stat = "count", col = 6, fill = "blue", alpha = 0.3)+
geom_rug(col = 3, alpha = 0.5)
data %>%
ggplot(aes(fxa_et))+
geom_histogram(stat = "count", col = 6, fill = "blue", alpha = 0.3)+
geom_rug(col = 3, alpha = 0.5)+
xlab("Idade") +
ylab("Frequência") +
ggtitle("Idade dos Intrevistados") +
theme(plot.title = element_text(hjust = .5, face = "bold", size = 18))
shiny::runApp('projeto_shiny_lu/app_teste')
#2
rcl <- function(n, x0, m, unit = TRUE) {
x <- integer(n + 1)
x[1] <- x0
for(i in 2:length(x)) {
x[i] <- ((2^16 + 3) * x[i - 1]) %% m
}
if(unit) x <- x/m
return(x[-1])
}
set.seed(4)
rcl(5, 1, 2^31)
runApp('projeto_shiny_lu/app_teste')
runApp('projeto_shiny_lu/app_teste')
runApp('projeto_shiny_lu/app_teste')
runApp('projeto_shiny_lu/app_teste')
jogar_dados <- function(n){
x <- sample(1:6, n, replace = TRUE)
return(x)
}
jogar_dados(5)
jogar_dados <- function(n){
x <- sample(1:6, n, replace = TRUE)
for(i in 1:n){
print0(i,"° dado = ",x[i])
}
}
jogar_dados(5)
jogar_dados <- function(n){
x <- sample(1:6, n, replace = TRUE)
for(i in 1:n){
paste0(i,"° dado = ",x[i])
}
}
jogar_dados(5)
jogar_dados <- function(n){
x <- sample(1:6, n, replace = TRUE)
for(i in 1:n){
print(paste0(i,"° dado = ",x[i]))
}
}
jogar_dados(5)
jogar_dados(5)
jogar_dados(200)
setwd("~/2019-2/Bimetria/trabalho")
install.packages("drc")
library(tidyverse)
library(drc)
## Análise binária
bin <- read.csv2(base_binaria.csv, header = TRUE)
## Análise binária
bin <- read.csv2("base_binaria.csv", header = TRUE)
View(bin)
## Análise binária
bin <- read.csv2("base_binaria.csv", header = TRUE, sep = ";", dec = ",")
View(bin)
View(bin)
help("selenium")
data("selenium")
selenium
data("terbuthylazin")
help("terbuthylazin")
terbuthylazin
data(G.aparine)
G.aparine
View(terbuthylazin)
########################################################################
### Visualização dos resultados
x11()
ggplot(bin, aes(x = dose, y = resposta)) + geom_point()
ggplot(bin, aes(x = I(log(dose)), y = resposta)) + geom_point()
########################################################################
### Visualização dos resultados
x11()
ggplot(bin, aes(x = dose, y = resposta)) + geom_point()
ggplot(bin, aes(x = I(log(dose)), y = resposta)) + geom_point()
ggplot(bin, aes(x = dose, y = resposta)) + geom_point()
ggplot(bin, aes(x = I(log(dose)), y = resposta)) + geom_point()
options(digits = 8)
### Modelo log-logístico de quatro parâmetros.
ll_4 <- drm(resposta ~ dose, data = bin, fct = LL.4())
coef(ll_4) ### Estimativas dos parâmetros.
round(coef(ll_4),5)
summary(ll_4)
ll_3 <- drm(resposta ~ dose, data = bin, fct = LL.3())
summary(ll_3)
### Comecemos pelo modelo log-logístico de quatro parâmetros.
terb_m1 <- drm(rgr ~ dose, data = terbuthylazin, fct = LL.4())
coef(terb_m1) ### Estimativas dos parâmetros.
round(coef(terb_m1),5)
summary(terb_m1)
summary(ll_3)
ll_3_alt <- drm(resposta ~ dose, data = bin, fct = LL.3(fixed = c(NA, 0, NA)))
summary(ll_3_alt)
ll_5 <- drm(resposta ~ dose, data = bin, fct = LL.5())
summary(ll_5)
### Representações gráficas do ajuste.
plot(ll_3) ### Curva ajustada sobre os as médias, em cada dose.
plot(ll_3, type = 'all') ### Curva ajustada sobre os dados amostrais.
plot(ll_3, type="confidence") ### Curva ajustada com as bandas de confiança (95%.
plot(ll_3, type="bars") ### Curva ajustada com os erros padrões.
### Análise de resíduos
residuos <- residuals(ll_3, typeRes = 'standardised')
fit <- fitted(ll_3)
par(mfrow = c(1,2))
plot(residuos ~ fit, cex = 1.2, pch = 20)
qqnorm(residuos, pch = 20, cex = 1.2)
qqline(residuos)
### Intervalos de confiança(95%) para os parâmetros do modelo.
confint(ll_3)
summary(terb_m2_alt)
### Comecemos pelo modelo log-logístico de quatro parâmetros.
terb_m1 <- drm(rgr ~ dose, data = terbuthylazin, fct = LL.4())
coef(terb_m1) ### Estimativas dos parâmetros.
round(coef(terb_m1),5)
summary(terb_m1)
terb_m2 <- drm(rgr ~ dose, data = terbuthylazin, fct = LL.4(fixed = c(NA, 0, NA, NA)))
summary(terb_m2)
terb_m2_alt <- drm(rgr ~ dose, data = terbuthylazin, fct = LL.3())
summary(terb_m2_alt)
terb_m3 <- drm(rgr ~ dose, data = terbuthylazin, fct = LL.5(fixed = c(NA, 0, NA, NA, NA)))
summary(terb_m3)
ll_3_alt <- drm(resposta ~ dose, data = bin, fct = LL.3(fixed = c(0, NA, 0)))
ll_3_alt <- drm(resposta ~ dose, data = bin, fct = LL.3(fixed = c(0, NA, NA)))
summary(ll_3_alt)
ll_3_alt2 <- drm(resposta ~ dose, data = bin, fct = LL.3(fixed = c(NA, NA, 0)))
summary(ll_3_alt2)
ggplot(bin, aes(x = dose, y = resposta)) + geom_point(aes(colour = n))
ggplot(bin, aes(x = I(log(dose)), y = resposta)) + geom_point(aes(colour = n))
ggplot(bin, aes(x = I(log(dose)), y = resposta)) + geom_point() + facet_grid(~n)
G.aparine
### Comecemos pelo modelo log-logístico de quatro parâmetros.
llbin4 <- drm(resposta ~ dose, curveid = n, data = bin, fct = LL.4())
Sbin4 <- summary(llbin4)
Sbin4
### Comecemos pelo modelo log-logístico de quatro parâmetros.
llbin4 <- drm(n ~ dose, curveid = resposta, data = bin, fct = LL.4())
Sbin4 <- summary(llbin4)
Sbin4
summary(ll_5)
ll <- drm(resposta ~ dose, data = bin)
ll_2 <- drm(resposta ~ dose, data = bin, fct = LL.2())
ll_2 <- drm(resposta ~ dose, data = bin, fct = LL.3u())
summary(ll_2)
ll_2 <- drm(resposta ~ dose, data = bin, fct = LL2.2())
summary(ll_2)
### Representações gráficas do ajuste.
plot(ll_2) ### Curva ajustada sobre os as médias, em cada dose.
plot(ll_2, type = 'all') ### Curva ajustada sobre os dados amostrais.
plot(ll_2, type="confidence") ### Curva ajustada com as bandas de confiança (95%.
plot(ll_2, type="bars") ### Curva ajustada com os erros padrões.
### Análise de resíduos
residuos <- residuals(ll_2, typeRes = 'standardised')
fit <- fitted(ll_2)
par(mfrow = c(1,2))
plot(residuos ~ fit, cex = 1.2, pch = 20)
qqnorm(residuos, pch = 20, cex = 1.2)
qqline(residuos)
### Intervalos de confiança(95%) para os parâmetros do modelo.
confint(ll_2)
### Algumas predições. Vamos trabalhar com as seguintes doses: 5, 50 e 150.
new_doses <- data.frame(dose = c(5,50,150)) ### Doses usadas para predição.
predict(ll_2, newdata = new_doses) ### Valores ajustados.
predict(ll_2, se.fit = TRUE, newdata = new_doses)
### Valores ajustados com os erros padrões.
predict(ll_2, interval = 'confidence', newdata = new_doses)
### Valores ajustados e ICs(95%) para a resposta média.
predict(ll_2, interval = 'prediction', newdata = new_doses)
### Estimação de doses efetivas. Vamos estimar as doses para as seguintes
### respostas (relativas à resposta maximal): 5, 50 e 90.
ED(ll_2, c(5, 10, 50), interval = "delta")
### Teste da falta de ajuste
modelFit(ll_2)
selenium
library(readxl)
data <- read_excel("/home/jaymejr/Desktop/01_19 G1 - Data.xlsm")
View(data)
head(data)
selenium
View(bin)
bin$prop <- (selenium$resposta+0.5)/(selenium$n+1) ### Proporção de respostas.
(selenium$resposta+0.5)/(selenium$n+1)
(selenium$resposta)/(selenium$n)
bin$prop <- (bin$resposta+0.5)/(bin$n+1) ### Proporção de respostas.
bin$logito <- log((bin$prop)/(1-bin$prop))
bin$logConc <- log(bin$dose + 0.5)
## Análise binária
bin <- read.csv2("base_binaria.csv", header = TRUE, sep = ";", dec = ",")
bin$prop <- (bin$resposta+0.5)/(bin$n+1) ### Proporção de respostas.
bin$logito <- log((bin$prop)/(1-bin$prop))
bin$logDose <- log(bin$dose + 0.5)
### Gráficos para a proporção de insetos mortos vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = prop, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('Proporção de Desposta')
ggplot(bin, aes(x = logDose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('Proporção de Resposta')
### Gráficos para o logito da proporção de respostas vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = logDose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('log(p/(1-p))')
### Gráficos para o logito da proporção de respostas vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = logDose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('log(p/(1-p))')
### Gráficos para a proporção de insetos mortos vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = prop, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('Proporção de Resposta')
ggplot(bin, aes(x = dose, y = prop)) + geom_point(size = 4) + geom_line()
### Gráficos para a proporção de insetos mortos vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('Proporção de Resposta')
ggplot(bin, aes(x = logDose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('Proporção de Resposta')
### Gráficos para o logito da proporção de respostas vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = logDose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('log(p/(1-p))')
### Gráficos para a proporção de insetos mortos vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('Proporção de Resposta')
ggplot(bin, aes(x = logDose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('Proporção de Resposta')
### Gráficos para o logito da proporção de respostas vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = logDose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = dose, y = prop)) + geom_point(size = 4) + geom_line()
ggplot(bin, aes(x = logDose, y = prop)) + geom_point(size = 4) + geom_line()
mod_norm_orig <- glm(prop ~ dose, family = binomial(link = 'probit'),
weights = total, data = bin)
mod_norm_orig <- glm(prop ~ dose, family = binomial(link = 'probit'),
weights = n, data = bin)
mod_norm_orig <- glm(prop ~ dose, family = binomial(link = 'probit'),
weights = n, data = bin)
mod_gumb_orig <- glm(prop ~ dose, family = binomial(link = 'cloglog'),
weights = n, data = bin)
mod_cauc_orig <- glm(prop ~ dose, family = binomial(link = 'cauchit'),
weights = n, data = bin)
## Escala logarítmica
mod_logis_log <- glm(prop ~ logDose, family = binomial(link = 'logit'),
weights = n, data = bin)
mod_norm_log <- glm(prop ~ logDose, family = binomial(link = 'probit'),
weights = n, data = bin)
mod_gumb_log <- glm(prop ~ logDose, family = binomial(link = 'cloglog'),
weights = n, data = bin)
mod_cauc_log <- glm(prop ~ logDose, family = binomial(link = 'cauchit'),
weights = n, data = bin)
### Vamos comparar os ajustes usando o critério de informação de Akaike (AIC)
AIC(mod_logis_orig, mod_norm_orig, mod_gumb_orig, mod_cauc_orig,
mod_logis_log, mod_norm_log, mod_gumb_log, mod_cauc_log)
## Escala original
mod_logis_orig <- glm(prop ~ dose, family = binomial(link = 'logit'),
weights = n, data = bin)
### Vamos comparar os ajustes usando o critério de informação de Akaike (AIC)
AIC(mod_logis_orig, mod_norm_orig, mod_gumb_orig, mod_cauc_orig,
mod_logis_log, mod_norm_log, mod_gumb_log, mod_cauc_log)
summary(mod_cauc_log)
ggplot(bin, aes(x = dose, y = prop, weight = n)) + geom_point(size = 4) +
geom_smooth(method = "glm",  se = F,
method.args = list(family = binomial(link = 'logit'))) +
geom_smooth(method = "glm",  se = F, colour = 'red',
method.args = list(family = binomial(link = 'probit'))) +
geom_smooth(method = "glm",  se = F, colour = 'green',
method.args = list(family = binomial(link = 'cloglog'))) +
geom_smooth(method = "glm",  se = F, colour = 'black',
method.args = list(family = binomial(link = 'cauchit')))
ggplot(bin, aes(x = logDose, y = prop, weight = n)) + geom_point(size = 4) +
geom_smooth(method = "glm",  se = F)
ggplot(bin, aes(x = logDose, y = prop, weight = n)) + geom_point(size = 4) +
geom_smooth(method = "glm",  se = F,
method.args = list(family = binomial(link = 'logit'))) +
geom_smooth(method = "glm",  se = F, colour = 'red',
method.args = list(family = binomial(link = 'probit'))) +
geom_smooth(method = "glm",  se = F, colour = 'green',
method.args = list(family = binomial(link = 'cloglog'))) +
geom_smooth(method = "glm",  se = F, colour = 'black',
method.args = list(family = binomial(link = 'cauchit')))
data_predic <- data.frame(conc = c(50, 125, 375))
data_predic
predict(mod_cauc_log, newdata = data_predic, type = 'response', se.fit = TRUE)
predict(mod_cauc_log, newdata = data_predic, se.fit = TRUE)
### Doses para as quais vamos estimar a probabilidade de resposta.
predict(mod_cauc_log, newdata = data_predic)
mod_cauc_log
predict(mod_cauc_log, newdata = data_predic, type = 'response', se.fit = FALSE)
predict(mod_cauc_log, newdata = log(data_predic), type = 'response', se.fit = FALSE)
class(mod_cauc_log)
predict(mod_cauc_log, newdata = log(data_predic), type = "link", se.fit = FALSE)
predict(mod_cauc_orig, newdata = log(data_predic), type = 'response', se.fit = FALSE)
data_predic <- data.frame(logDose = log(c(50, 125, 375)))
data_predic
predict(mod_cauc_orig, newdata = data_predic, type = 'response', se.fit = FALSE)
predict(mod_cauc_log, newdata = data_predic, type = 'response', se.fit = FALSE)
install.packages("MASS")
install.packages("MASS")
library(MASS)
### Agora, vamos estimar algumas doses efetivas usando a função dose.p, do
### pacote MASS.
dose_efec <- dose.p(mod_cauc_log, cf = c(1,2), p = c(0.25,0.5,0.75))
dose_efec
coef(mod_cauc_log)
Estimate <- c(dose_efec); Estimate
ggplot(bin, aes(x = logDose, y = prop, weight = n)) + geom_point(size = 4) +
geom_smooth(method = "glm",  se = F,
method.args = list(family = binomial(link = 'logit'))) +
geom_smooth(method = "glm",  se = F, colour = 'red',
method.args = list(family = binomial(link = 'probit'))) +
geom_smooth(method = "glm",  se = F, colour = 'green',
method.args = list(family = binomial(link = 'cloglog'))) +
geom_smooth(method = "glm",  se = F, colour = 'black',
method.args = list(family = binomial(link = 'cauchit')))
library(tidyverse)
library(drc)
library(MASS)
## Análise binária
bin <- read.csv2("base_binaria.csv", header = TRUE, sep = ";", dec = ",")
bin$prop <- (bin$resposta+0.5)/(bin$n+1) ### Proporção de respostas.
bin$logito <- log((bin$prop)/(1-bin$prop))
bin$logDose <- log(bin$dose + 0.5)
x11()
### Gráficos para a proporção de insetos mortos vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('Proporção de Resposta')
ggplot(bin, aes(x = logDose, y = prop)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('Proporção de Resposta')
### Gráficos para o logito da proporção de respostas vs dose (com as doses nas
### escalas original e logaritmica)
ggplot(bin, aes(x = dose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('Dose') + ylab('log(p/(1-p))')
ggplot(bin, aes(x = logDose, y = logito)) + geom_point(size = 4) +
geom_line() + xlab('log(Dose)') + ylab('log(p/(1-p))')
## Escala original
mod_logis_orig <- glm(prop ~ dose, family = binomial(link = 'logit'),
weights = n, data = bin)
mod_norm_orig <- glm(prop ~ dose, family = binomial(link = 'probit'),
weights = n, data = bin)
mod_gumb_orig <- glm(prop ~ dose, family = binomial(link = 'cloglog'),
weights = n, data = bin)
mod_cauc_orig <- glm(prop ~ dose, family = binomial(link = 'cauchit'),
weights = n, data = bin)
## Escala logarítmica
mod_logis_log <- glm(prop ~ logDose, family = binomial(link = 'logit'),
weights = n, data = bin)
mod_norm_log <- glm(prop ~ logDose, family = binomial(link = 'probit'),
weights = n, data = bin)
mod_gumb_log <- glm(prop ~ logDose, family = binomial(link = 'cloglog'),
weights = n, data = bin)
mod_cauc_log <- glm(prop ~ logDose, family = binomial(link = 'cauchit'),
weights = n, data = bin)
### Vamos comparar os ajustes usando o critério de informação de Akaike (AIC)
AIC(mod_logis_orig, mod_norm_orig, mod_gumb_orig, mod_cauc_orig,
mod_logis_log, mod_norm_log, mod_gumb_log, mod_cauc_log)
summary(mod_cauc_log)
ggplot(bin, aes(x = logDose, y = prop, weight = n)) + geom_point(size = 4) +
geom_smooth(method = "glm",  se = F,
method.args = list(family = binomial(link = 'logit'))) +
geom_smooth(method = "glm",  se = F, colour = 'red',
method.args = list(family = binomial(link = 'probit'))) +
geom_smooth(method = "glm",  se = F, colour = 'green',
method.args = list(family = binomial(link = 'cloglog'))) +
geom_smooth(method = "glm",  se = F, colour = 'black',
method.args = list(family = binomial(link = 'cauchit')))
data_predic <- data.frame(logDose = log(c(50, 125, 375)))
data_predic
predict(mod_cauc_log, newdata = data_predic, type = 'response', se.fit = FALSE)
### Agora, vamos estimar algumas doses efetivas usando a função dose.p, do
### pacote MASS.
dose_efec <- dose.p(mod_cauc_log, cf = c(1,2), p = c(0.25,0.5,0.75))
dose_efec
coef(mod_cauc_log)
Estimate <- c(dose_efec); Estimate
Estimate <- c(exp(dose_efec)); Estimate
EP <- attr(dose_efec, "SE"); EP
ICs <- data.frame(Estimate, LI = Estimate -1.96 * EP, LS = Estimate +1.96 * EP)
ICs
########################################################################
### Análise contínua
cont <- read.csv2("base_continua.csv", header = TRUE, sep = ";", dec = ",")
View(cont)
terbuthylazin
G.aparine
ggplot(cont, aes(x = Dose, y = Resposta)) + geom_point(aes(colour = Grupo))
ggplot(cont, aes(x = I(log(Dose)), y = Resposta)) + geom_point(aes(colour = Group))
ggplot(cont, aes(x = I(log(Dose)), y = Resposta)) + geom_point(aes(colour = Grupo))
ggplot(cont, aes(x = I(log(Dose)), y = Resposta)) + geom_point() + facet_grid(~Grupo)
### Comecemos pelo modelo log-logístico de quatro parâmetros.
ll_4 <- drm(Resposta ~ Dose, curveid = Grupo, data = cont, fct = LL.4())
S.ll_4 <- summary(ll_4)
S.ll_4
par(mfrow = c(1,2))
plot(residuals(ll_4, type = 'standard') ~ fitted(LL_4), cex = 1.2, pch = 20,
xlab = 'Valores ajustados', ylab = 'Resíduos')
plot(residuals(ll_4, type = 'standard') ~ fitted(ll_4), cex = 1.2, pch = 20,
xlab = 'Valores ajustados', ylab = 'Resíduos')
qqnorm(residuals(ll_4, type = 'standard'), pch = 20, cex = 1.2)
qqline(residuals(ll_4, type = 'standard'))
## Comparação com outros modelos
m_all <- mselect(ll_4, list(LL.4(), LL.5(), W1.3(), W1.4(), W2.4(), LN.3(), LN.4()))
m_all
### Usando a mesma transformação, vamos avaliar os ajustes de outros modelos.
m1 <- mselect(G.aparine.m2, list(LL.5(), W1.3(), W1.4(), W2.4(), LN.3(), LN.4()))
m1
## Comparação com outros modelos
m_all <- mselect(ll_4, list(LL.5(), W1.3(), W1.4(), W2.4(), LN.3(), LN.4()))
m_all
data(G.aparine)
### Comecemos pelo modelo log-logístico de quatro parâmetros.
G.aparine.m1 <- drm(drymatter ~ dose, curveid = treatment, data = G.aparine, fct = LL.4())
S.aparine.m1 <- summary(G.aparine.m1)
S.aparine.m1
G.aparine.m2 <- boxcox(G.aparine.m1)
G.aparine.m2
### Usando a mesma transformação, vamos avaliar os ajustes de outros modelos.
m1 <- mselect(G.aparine.m2, list(LL.4(), LL.5(), W1.3(), W1.4(), W2.4(), LN.3(), LN.4()))
m1
m_all
wbl_4 <- drm(Resposta ~ Dose, curveid = Grupo, data = cont,
fct = W1.4(), bcVal = 0.25)
AIC(wbl_4)
AIC(ll_4)
wbl_4 <- drm(Resposta ~ Dose, curveid = Grupo, data = cont,
fct = W1.4())
AIC(wbl_4)
summary(G.aparine.m3)
AIC(wbl_4, ll_4)
## Corroborando que o modelo weibull de 4 parâmetros se mostrou melhor ajustado.
summary(wbl_4)
### Representações gráficas do ajuste.
plot(wbl_4) ### Curva ajustada sobre os as médias, em cada dose.
plot(wbl_4, type = 'all') ### Curva ajustada sobre os dados amostrais.
### Representações gráficas do ajuste.
plot(wbl_4) ### Curva ajustada sobre os as médias, em cada dose.
plot(wbl_4, type = 'all') ### Curva ajustada sobre os dados amostrais.
### Vamos investigar se podemos ter um mesmo 'b' para as duas curvas.
wbl_4_b <- drm(Resposta ~ Dose, curveid = Grupo, data = cont,
pmodels = data.frame(b = 1, c = Grupo, d = Grupo, e = Grupo),
fct = W1.4())
anova(wbl_4, wbl_4_b)
G.aparine.m3 <- drm(drymatter ~ dose, curveid = treatment, data = G.aparine,
fct = W1.4(), bcVal = 0.25)
### Vamos investigar se podemos ter um mesmo 'b' para as duas curvas.
G.aparine.m3_b <- drm(drymatter ~ dose, curveid = treatment, data = G.aparine,
pmodels = data.frame(b = 1, c = treatment, d = treatment, e = treatment),
fct = W1.4(), bcVal = 0.25)
anova(G.aparine.m3, G.aparine.m3_b)
plot(wbl_4_b)
summary(wbl_4_b)
### Vamos investigar agora se podemos também fixar um mesmo 'd' para as duas curvas.
wbl_4_bd <- drm(Resposta ~ Dose, curveid = Grupo, data = cont,
pmodels = data.frame(b = 1, c = Grupo, d = 1, e = Grupo),
fct = W1.4())
anova(wbl_4_b, wbl_4_bd)
### Estimação de doses efetivas
ED(wbl_4_b, c(5, 10, 50), interval = "delta")
### Vamos calcular a potência relativa. Primeiro para o modelo final, em
### que o parâmetro de inclinação relativa é o mesmo para as duas curvas.
EDcomp(wbl_4_b, percVec = c(50,50)) ### PR(50)
EDcomp(wbl_4_b, percVec = c(90,90)) ### PR(90)
### Vamos retomar o modelo em que as duas curvas têm inclinações diferentes.
EDcomp(wbl_4, percVec = c(50,50))
EDcomp(wbl_4, percVec = c(90,90))
