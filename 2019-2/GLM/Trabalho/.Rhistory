datacomp
pred2 <- prediction(pval4, bmarkvalid$y)
### Vamos plotar a curva ROC
perf2 <- performance(pred2, measure = "tpr" , x.measure = "fpr")
plot(perf2, colorize=TRUE,  print.cutoffs.at=seq(0.05,0.95,0.05), lwd = 2, main="Curva ROC",ylab="Sensibilidade",xlab="Especificidade")
abline(0,1, lty = 2)
predaj2 <- prediction(paj4, bmarkajuste$y)
perfaj2 <- performance(predaj2, measure = "tpr" , x.measure = "fpr")
plot(perfaj2, col = 'red', lwd = 2, add = T)
ajustegamll$mu.coefficients
length(ajustegamll$mu.coefficients)
length(ajuste4$coefficients)
length(ajuste1_prob$coefficients)
length(ajuste_probito$coefficients)
df <- data.frame(Modelo = c("GAMLLS(probito)", "GLM(logito)", "GLM(probito)"),
AIC = c(ajuste_probito$aic, ajuste4$aic, ajustegamll$aic),
`N° Parâmetros` = c(length(ajustegamll$mu.coefficients), length(ajuste4$coefficients),
length(ajuste_probito$coefficients))) %>%
arrange(AIC)
AIC_ <- data.frame(AIC(ajuste4,ajuste_probito,ajuste_cloglog,ajuste_cauchit)) %>%
mutate(Lig = c("Logito", "Probito", "Clog-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste4$coefficients), length(ajuste_probito$coefficients),
length((ajuste1_clog$coefficients), length(ajuste1_cauc)))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC)
AIC_ <- data.frame(AIC(ajuste4,ajuste_probito,ajuste_cloglog,ajuste_cauchit)) %>%
mutate(Lig = c("Logito", "Probito", "Clog-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste4$coefficients), length(ajuste_probito$coefficients),
length((ajuste1_clog$coefficients), length(ajuste1_cauc$coefficients)))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC)
AIC_ <- data.frame(AIC(ajuste4,ajuste_probito,ajuste_cloglog,ajuste_cauchit)) %>%
mutate(Lig = c("Logito", "Probito", "Clog-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste4$coefficients), length(ajuste_probito$coefficients),
length((ajuste_cloglog$coefficients), length(ajuste_cauchit$coefficients)))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC)
AIC_ <- data.frame(AIC(ajuste4,ajuste_probito,ajuste_cloglog,ajuste_cauchit)) %>%
mutate(Lig = c("Logito", "Probito", "Clog-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste4$coefficients), length(ajuste_probito$coefficients),
length(ajuste_cloglog$coefficients), length(ajuste_cauchit$coefficients))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC)
T_1 <- kableExtra::kable(AIC_, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_1
AIC_ <- data.frame(AIC(ajuste4,ajuste_probito,ajuste_cloglog,ajuste_cauchit)) %>%
mutate(Lig = c("Logito", "Probito", "Clog-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste4$coefficients), length(ajuste_probito$coefficients),
length(ajuste_cloglog$coefficients), length(ajuste_cauchit$coefficients))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC, `N° de Parâmetros`)
T_1 <- kableExtra::kable(AIC_, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_1
summary(ajustegamll)
ajustegamll$mu.coefficients
ajustegamll$mu.coefSmo
getSmo(ajustegamll)
g1 <- getSmo(ajustegamll)
g1$coef
table(g1$coef)
g1$coef
## getSmo(ajuste)$coef # me dá a idéia de como ajustar os níveis em grupo
ajtjob <- gamlss(y~pcat(job, method="GAIC", k=log(dim(bmarkajuste)[1])) + month +
age + marital + education + default + balance + housing + loan +
contact + day + duration + campaign + pdays,
family = BI(mu.link = "probit"), data=bmarkajuste)
getSmo(ajtjob)$coef
## getSmo(ajuste)$coef # me dá a idéia de como ajustar os níveis em grupo
ajtjob <- gamlss(y~pcat(job, method="GAIC", k=2) + month +
age + marital + education + default + balance + housing + loan +
contact + day + duration + campaign + pdays,
family = BI(mu.link = "probit"), data=bmarkajuste)
getSmo(ajtjob)$coef
x <- getSmo(ajustegamll)
x$lambda
summary(ajtjob)
ajtjob$mu.coefSmo
ajtjob$mu.coefficients
ajtmon <- gamlss(y~pcat(month, method="GAIC", k=log(dim(bmarkajuste)[1])) + job +
age + marital + education + default + balance + housing + loan +
contact + day + duration + campaign + pdays,
family = BI(mu.link = "probit"), data=bmarkajuste)
getSmo(ajtmon)$coef
g1$coef
g1$lambda
getSmo(ajtmon)$lambda
g1$factor
g1$coef
unique(g1$coef)
unique(getSmo(ajtmon)$coef)
round(getSmo(ajtmon)$coef, digits = 3)
round(g1$coef, digits = 3)
unique(round(g1$coef, digits = 3))
unique(round(getSmo(ajtjob)$coef, digits = 3))
## getSmo(ajuste)$coef # me dá a idéia de como ajustar os níveis em grupo
ajtjob <- gamlss(y~pcat(job, method="GAIC", k=log(dim(bmarkajuste)[1]), lambda = -1) + month +
age + marital + education + default + balance + housing + loan +
contact + day + duration + campaign + pdays,
family = BI(mu.link = "probit"), data=bmarkajuste)
getSmo(ajtjob)$coef
unique(round(getSmo(ajtjob)$coef, digits = 3))
getSmo(ajtjob)$lambda
## getSmo(ajuste)$coef # me dá a idéia de como ajustar os níveis em grupo
ajtjob <- gamlss(y~pcat(job, method="GAIC", lambda = -1) + month +
age + marital + education + default + balance + housing + loan +
contact + day + duration + campaign + pdays,
family = BI(mu.link = "probit"), data=bmarkajuste)
getSmo(ajtjob)$coef
unique(round(getSmo(ajtjob)$coef, digits = 3))
getSmo(ajtjob)$lambda
unique(round(g1$coef, digits = 2))# coeficientes pra saber quais niveis formam os grupos
unique(round(g1$coef, digits = 1))# coeficientes pra saber quais niveis formam os grupos
unique(round(g1$coef, digits = 2))# coeficientes pra saber quais niveis formam os grupos
round(g1$coef, digits = 2)
mnj <- gamlss(y~1, family = BI(mu.link = "probit"), data=bmarkajuste) # null model
msj <- gamlss(y~job-1, family = BI(mu.link = "probit"), data=bmarkajuste) # saturated model
m1j <- gamlss(y~pcat(job), family = BI(mu.link = "probit"), data=bmarkajuste)
AIC(mnj, msj, m1j, m11j)
AIC(mn, ms, m1, m11)
getSmo(m11)$coef
groups_m <- getSmo(unique(m11))$coef
groups_m <- unique(getSmo(m11)$coef)
groups_m <- unique(getSmo(m11)$coef)
coefs_m <- getSmo(m11)$coef
str(data$month)
unique(data$month)
x <- unique(data$month)
x
coefs_m <- round(getSmo(m11)$coef, digits = 2)
coefs_m
data.frame(x, coefs_m)
plot(bmarkajuste$month, bmarkajuste$y)
levels(x)
month_tbl <- data.frame(Niveis = levels(bmarkajuste$month), Coeficientes = coefs_m) %>% arrange(Coeficientes)
month_lambda <- getSmo(m11)$lambda
month_lambda <- round(getSmo(m11)$lambda, digits = 3)
month_tbl <- data.frame(Niveis = levels(bmarkajuste$month), Coeficientes = coefs_m) %>% arrange(Coeficientes)
View(month_tbl)
coefs_j <- round(getSmo(m11j)$coef, digits = 2)
coefs_j <- round(getSmo(m11j)$coef, digits = 3)
m11j <- gamlss(y~pcat(job, method="GAIC", k=2), family = BI(mu.link = "probit"), data=bmarkajuste)
View(m11j)
coefs_j <- round(getSmo(m11j)$coef, digits = 3)
coefs_j <- round(getSmo(m11j)$coef, digits = 2)
job_lambda <- round(getSmo(m11j)$lambda, digits = 3)
job_tbl <- data.frame(Niveis = levels(bmarkajuste$job), Coeficientes = coefs_j) %>% arrange(Coeficientes)
View(job_tbl)
data.frame(ajuste_probito$month, bmarkajuste$month)
data.frame(ajuste_probito$job, bmarkajuste$job)
View(job_tbl)
T_2 <- kableExtra::kable(month_tbl, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_2
T_3 <- kableExtra::kable(job_tbl, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_3
### Reorganizando as variáveis month e job ####
m_g1 <- c("may")
### Reorganizando as variáveis month e job ####
m_g1 <- "may"
m_g2 <- c("jan", "jun", "jul", "nov")
m_g3 <- "aug"
m_g4 <- c("feb", "apr")
m_g5 <- c("mar", "sep", "dec")
j_g1 <- "blue-collar"
j_g3 <- c("admin", "housemaid", "management", "self-employed", "unemployed", "unknow")
j_g4 <- "retired"
j_g4 <- "retired"
j_g5 <- "student"
bmarkajuste2 <- bmarkajuste %>%
mutate(month = ifelse(month %in% m_g2, "month2",
ifelse(month %in% m_g4, "month4",
ifelse(month %in% m_g5, "month5",
ifelse(month == "may", "month1", "month3")))),
month = factor(month, levels = c("month1", "month2", "month3", "month4", "month5")),
job = ifelse(job %in% j_g2, "job2",
ifelse(job %in% j_g3, "job3",
ifelse(job == "blue-collar", "job1",
ifelse(job == "retired", "job4", "job5")))),
job = factor(job, levels = c("job1", "job2", "job3", "job4", "job5")))
j_g2 <- c("entrepreneur", "sevices", "tehnician")
bmarkajuste2 <- bmarkajuste %>%
mutate(month = ifelse(month %in% m_g2, "month2",
ifelse(month %in% m_g4, "month4",
ifelse(month %in% m_g5, "month5",
ifelse(month == "may", "month1", "month3")))),
month = factor(month, levels = c("month1", "month2", "month3", "month4", "month5")),
job = ifelse(job %in% j_g2, "job2",
ifelse(job %in% j_g3, "job3",
ifelse(job == "blue-collar", "job1",
ifelse(job == "retired", "job4", "job5")))),
job = factor(job, levels = c("job1", "job2", "job3", "job4", "job5")))
View(bmarkajuste2)
bmarkvalid2 <- bmarkvalid %>%
mutate(month = ifelse(month %in% m_g2, "month2",
ifelse(month %in% m_g4, "month4",
ifelse(month %in% m_g5, "month5",
ifelse(month == "may", "month1", "month3")))),
month = factor(month, levels = c("month1", "month2", "month3", "month4", "month5")),
job = ifelse(job %in% j_g2, "job2",
ifelse(job %in% j_g3, "job3",
ifelse(job == "blue-collar", "job1",
ifelse(job == "retired", "job4", "job5")))),
job = factor(job, levels = c("job1", "job2", "job3", "job4", "job5")))
View(bmarkvalid2)
ajuste_null_n <- glm(y ~ 1, data = bmarkajuste2, family = 'binomial')
ajuste_null_prob_n <- glm(y ~ 1, data = bmarkajuste2, family = 'binomial'(link = probit))
ajuste_null_clog_n <- glm(y ~ 1, data = bmarkajuste2, family = 'binomial'(link = cloglog))
ajuste_null_cauc_n <- glm(y ~ 1, data = bmarkajuste2, family = 'binomial'(link = cauchit))
ajuste1_n <- glm(y ~ .,family=binomial,data = bmarkajuste2)
ajuste1_prob_n <- glm(y ~ .,family=binomial(link = probit),data = bmarkajuste2)
ajuste1_clog_n <- glm(y ~ .,family=binomial(link = cloglog),data = bmarkajuste2)
ajuste1_cauc_n <- glm(y ~ .,family=binomial(link = cauchit),data = bmarkajuste2)
ajuste_logito_n <- step(ajuste_null_n, scope = formula(ajuste1_n), direction = "both")
ajuste_probito_n <- step(ajuste_null_prob_n, scope = formula(ajuste1_prob_n), direction = 'both')
ajuste_cloglog_n <- step(ajuste_null_clog_n, scope = formula(ajuste1_clog_n), direction = 'both')
ajuste_cauchit_n <- step(ajuste_null_cauc_n, scope = formula(ajuste1_cauc_n), direction = 'both')
AIC_ <- data.frame(AIC(ajuste_probito, ajuste_probito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n)) %>%
mutate(Lig = c("Probito *", "Logito", "Probito", "Complemento log-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste_probito$coefficients),length(ajuste_probito_n$coefficients),
length(ajuste_probito_n$coefficients), length(ajuste_cloglog_n$coefficients),
length(ajuste_cauchit_n$coefficients))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC, `N° de Parâmetros`)
data.frame(AIC(ajuste_probito, ajuste_probito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n)) %>%
mutate(Lig = c("Probito *", "Logito", "Probito", "Complemento log-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste_probito$coefficients),length(ajuste_probito_n$coefficients),
length(ajuste_probito_n$coefficients), length(ajuste_cloglog_n$coefficients),
length(ajuste_cauchit_n$coefficients))) %>%
arrange(AIC)
data.frame(AIC(ajuste_probito, ajuste_probito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n))
AIC(ajuste_probito, ajuste_probito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n)
AIC(ajuste_probito, ajuste_probito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n)
AIC_ <- data.frame(AIC(ajuste_probito, ajuste_logito_n, ajuste_probito_n, ajuste_cloglog_n, ajuste_cauchit_n)) %>%
mutate(Lig = c("Probito *", "Logito", "Probito", "Complemento log-log", "Cauchit"),
`N° de Parâmetros` = c(length(ajuste_probito$coefficients),length(ajuste_logito_n$coefficients),
length(ajuste_probito_n$coefficients), length(ajuste_cloglog_n$coefficients),
length(ajuste_cauchit_n$coefficients))) %>%
arrange(AIC) %>%
dplyr::select(`Função de Ligação` = Lig, AIC, `N° de Parâmetros`)
T_4 <- kableExtra::kable(AIC_, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_4
1821.418-1863.186
paj <- predict(ajuste_probito_n, type = 'response', newdata = bmarkajuste2)
pval <-predict(ajuste_probito_n, type = 'response', newdata = bmarkvalid2)
classp0.5 <- factor(ifelse(pval >= 0.5, 'no', 'yes'))
# classp0.5 ### Classificações usando o ponto de corte 0,5.
data.frame(pval, classp0.5) ### Probabilidades estimadas e classificações.
### Classificando como "no" indivíduos com p > 0,5.
tabela <- table(classp0.5, bmarkvalid2$y)
tabela
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.5 <- sum(classp0.5 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.5
espec0.5 <- sum(classp0.5 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.5
classp0.89 <- factor(ifelse(pval3 >= 0.89, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval3, classp0.89) ### Probabilidades estimadas e classificações.
classp0.89 <- factor(ifelse(pval >= 0.89, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.89) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela2 <- table(classp0.89, bmarkvalid2$y)
tabela2
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.89 <- sum(classp0.89 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.89
espec0.89 <- sum(classp0.89 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.89
classp0.3 <- factor(ifelse(pval >= 0.89, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
classp0.3 <- factor(ifelse(pval >= 0.3, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.35, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.15, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.32, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.3, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.11, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.9, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probabilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
classp0.3 <- factor(ifelse(pval >= 0.3, 'no', 'yes'))
# classp0.89 ### Classificações usando o ponto de corte 0,89.
data.frame(pval, classp0.3) ### Probbilidades estimadas e classificações.
### Classificando como "No" indivíduos com p > 0,89.
tabela3 <- table(classp0.3, bmarkvalid2$y)
tabela3
### Vamos estimar a sensibilidade e a especificidade referentes a esta regra de decisão.
sensp0.3 <- sum(classp0.3 == 'no' & bmarkvalid2$y == 'no')/sum(bmarkvalid2$y == 'no')
sensp0.3
espec0.3 <- sum(classp0.3 == 'yes' & bmarkvalid2$y == 'yes')/sum(bmarkvalid2$y == 'yes')
espec0.3
datacomp <- data.frame(c(sensp0.89,sensp0.5, sensp0.3),
c(espec0.89,espec0.5, espec0.3))
names(datacomp)<-c('Sensibilidade','Especificidade')
rownames(datacomp)<-c('pc=0,89','pc=0,5', 'pc=0,3')
datacomp
T_5 <- kableExtra::kable(datacomp, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_5
T_6 <- kableExtra::kable(datacomp, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
anova(ajuste1_probito_n)
anova(ajuste_probito_n)
ajuste_probito_n$coefficients
summary(ajuste_probito_n)
coefic <- ajuste_probito_n$coefficients
x <- summary(ajuste_probito_n)
x$coefficients
table(x$coefficients)
class(x$coefficients)
data.frame(x$coefficients)
coefic <- data.frame(summary(ajuste_probito_n)$coefficients)
View(coefic)
coefic <- data.frame(summary(ajuste_probito_n)$coefficients) %>%
mutate_all(function(x) round(x, digits = 3))
View(coefic)
coefic <- data.frame(summary(ajuste_probito_n)$coefficients)
coefic <- data.frame(summary(ajuste_probito_n)$coefficients) %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error)
coefic <- data.frame(summary(ajuste_probito_n)$coefficients) %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error) %>%
mutate_at(c("Estimativa", "Erro Padrão"), function(x) round(x, digits = 3)) %>%
dplyr::select(-c(z.value, Pr...z..))
coefic <- data.frame(summary(ajuste_probito_n)$coefficients) %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error) %>%
mutate_at(c("Estimativa", "Erro Padrão"), function(x) round(x, digits = 3)) #%>%
coefic <- data.frame(summary(ajuste_probito_n)$coefficients)
linha <- rownames(coefic)
coefic <- coefic %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error) %>%
mutate_at(c("Estimativa", "Erro Padrão"), function(x) round(x, digits = 3)) #%>%
coefic <- coefic %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error) %>%
mutate_at(c("Estimativa", "Erro Padrão"), function(x) round(x, digits = 3)) %>%
dplyr::select(-c(z.value, Pr...z..))
coefic <- data.frame(summary(ajuste_probito_n)$coefficients)
coefic <- coefic %>%
rename(Estimativa = Estimate, `Erro Padrão` = Std..Error) %>%
mutate_at(c("Estimativa", "Erro Padrão"), function(x) round(x, digits = 3)) %>%
dplyr::select(-c(z.value, Pr...z..))
rownames(coefic) <- linha
T_5 <- kableExtra::kable(coefic, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_5
install.packages("effects")
library(effects)
plot(predictorEffects(ajuste_probito_n, ~ month + job + duration))
pa <- plot(predictorEffects(ajuste_probito_n, ~ duration + month + job + pdays))
p1 <- plot(predictorEffects(ajuste_probito_n, ~ duration + month + job + pdays))
plot(predictorEffects(ajuste_probito_n, ~ housing + campaign + loan + age))
paj <- predict(ajuste_probito_n, type = 'response', newdata = bmarkajuste2)
pval <-predict(ajuste_probito_n, type = 'response', newdata = bmarkvalid2)
T_6
### Classificando como "no" indivíduos com p > 0,5.
tabela.5 <- table(classp0.5, bmarkvalid2$y)
tabela.5
T_6 <- kableExtra::kable(tabela.5, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_6
### Classificando como "No" indivíduos com p > 0,89.
tabela.89 <- table(classp0.89, bmarkvalid2$y)
T_7 <- kableExtra::kable(tabela.89, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_7
### Classificando como "No" indivíduos com p > 0,89.
tabela.3 <- table(classp0.3, bmarkvalid2$y)
T_8 <- kableExtra::kable(tabela.3, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_8
T_9 <- kableExtra::kable(datacomp, align = 'ccc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
pred <- prediction(pval, bmarkvalid2$Status)
pred <- prediction(pval, bmarkvalid2$y)
View(pred)
### Vamos plotar a curva ROC
perf <- performance(pred, measure = "tpr" , x.measure = "fpr")
# usando a base de ajuste
predaj <- prediction(paj, bmarkajuste2$y)
perfaj <- performance(predaj, measure = "tpr" , x.measure = "fpr")
pred <- prediction(pval, bmarkvalid2$y)
perf <- performance(pred, measure = "tpr" , x.measure = "fpr")
# usando a base de ajuste
predaj <- prediction(paj, bmarkajuste2$y)
perfaj <- performance(predaj, measure = "tpr" , x.measure = "fpr")
plot(perf, colorize=TRUE,  print.cutoffs.at=seq(0.05,0.95,0.05), lwd = 2)
abline(0,1, lty = 2)
plot(perfaj, col = 'red', lwd = 2, add = T)
performance(pred, 'auc')
plot(perf, colorize=TRUE,  print.cutoffs.at=seq(0.05,0.95,0.05), lwd = 2, main="Curva ROC",ylab="Sensibilidade",xlab="Especificidade")
abline(0,1, lty = 2)
plot(perfaj, col = 'red', lwd = 2, add = T)
plot(predictorEffects(ajuste_probito_n, ~ duration + month + job + pdays))
plot(predictorEffects(ajuste_probito_n, ~ housing + campaign + loan + age))
perf
performance(pred, measure = "tpr" , x.measure = "fpr")
curva <- performance(pred, 'auc')
curva
View(curva)
curva[[1]]
tabcruz_auto_2
tabcruz_auto_2 <- confusionMatrix(classp0.5,bmarkvalid$y);tabcruz_auto_2
tabcruz_auto_2
tabcruz_auto_2$positive
tabcruz_auto_2$table
### Classificando como "No" indivíduos com p > 0,89.
tabela.3 <- confusionMatrix(classp0.3,bmarkvalid2$y)
tabela.3
### Classificando como "No" indivíduos com p > 0,89.
tabela.3 <- confusionMatrix(classp0.3,bmarkvalid2$y)
tabela.3$table
T_8 <- kableExtra::kable(tabela.3$table, align = 'cc', booktabs = TRUE) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"))
T_8
performance(pred, 'auc')
hnp(ajustegamll, main="Envelopes Simulados")
hnp(ajuste_probito_n, main="Envelopes Simulados")
sum(data$y == "yes")/dim(data)[1]
perf3 <- performance(pred, measure = 'fpr', x.measure = 'fnr')
PMB <- perf3@y.values[[1]] ### P(M|B) para os diferentes pontos de corte (pc)
PBM <- perf3@x.values[[1]] ### P(B|M) para os diferentes pontos de corte.
pc <- perf3@alpha.values[[1]] ### pontos de corte.
ECMC <- 0.9*PMB + 0.7*PBM ### Custos esperados de má-classificação.
plot(pc, ECMC)
0.3*5
0.3*(1/5)
0.9/0.3
0.11*1.5
perf3 <- performance(pred, measure = 'fpr', x.measure = 'fnr')
PMB <- perf3@y.values[[1]] ### P(M|B) para os diferentes pontos de corte (pc)
PBM <- perf3@x.values[[1]] ### P(B|M) para os diferentes pontos de corte.
pc <- perf3@alpha.values[[1]] ### pontos de corte.
ECMC <- 0.89*PMB + 0.165*PBM ### Custos esperados de má-classificação.
plot(pc, ECMC, main="Custo de Classificação",ylab="ECMC",xlab="Pontos de Corte")
month_lambda <- round(getSmo(m11)$lambda, digits = 3)
round(getSmo(m11)$lambda, digits = 3)
round(getSmo(m11j)$lambda, digits = 3)
