summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
# Exponencial
x <- seq(0, 2.5, l = 100)
b0 = log(1)
b1 = 1.5
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
# Exponencial
x <- seq(0, 1.5, l = 100)
b0 = log(1)
b1 = 1.5
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
b1 = 0.5
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
b1 = 1.2
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
b0 = log(2)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
hist(y)
plot(y ~ x)
# Exponencial
x <- seq(0, 1.5, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
# Exponencial
x <- seq(0, 1.3, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
# Exponencial
x <- seq(0, 1.8, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
y = rexp(100, rate = lambda)
plot(y ~ x)
# Exponencial
x <- seq(0, 0.1, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = lambda)
plot(y ~ x)
# Exponencial
x <- seq(0, 0.5, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = lambda)
plot(y ~ x)
# Exponencial
x <- seq(0.1, 1.5, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
# Exponencial
x <- seq(0.1, 1.4, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
hist(y)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
# Exponencial
x <- seq(1, 2, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
# Exponencial
x <- seq(0.5, 1, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
# Exponencial
x <- seq(0.5, 1.5, l = 100)
b0 = log(1)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
b0 = log(10)
b1 = 1
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
exp(-10)
# Exponencial
x <- seq(0, 2, l = 100)
b0 = log(1)
b1 = -2
eta = b0 +b1*x # preditor de cada lambda
plot(eta ~ x)
lambda = exp(eta)
eta
lambda
summary(lambda)
plot(lambda ~ x)
# Simulação das observações
set.seed(123)
y = rexp(100, rate = 1/lambda)
plot(y ~ x)
y = rexp(100, rate = lambda)
plot(y ~ x)
summary(y)
y
plot(y)
# criando as observações censuradas
y1 <- y - 0.05
y2 <- y + 0.05
censu <- data.frame(y1, y2)
censu
#verossimilhança da censura
# função de verossimilhança
V_censu <- c()
for(i in 1:100){
V_censu[i] <- pexp(censu$y2[i], rate = lambda[i]) - pexp(censu$y1[i], rate = lambda[i])
}
plot(V_censu)
#log-verossimilhança
ll_censu <- log(V_censu)
ll_censu
plot(-ll_censu)
# Verossimilhança
vero <- sum(-ll_censu)
vero
#estimando
#log-verossimilhança
ll <- function(theta, inferior, superior, x){
lambda = exp(theta[1] + theta[2]*x)
output <- -sum(log(pexp(superior, rate = lambda) - pexp(inferior, rate = lambda)))
return(output)
}
# avaliar
ll(theta = c(log(0.5), 1), inferior = censu$y1, superior = censu$y2, x = x)
ll(theta = c(log(0.5), 0.5), inferior = censu$y1, superior = censu$y2, x = x)
# maximizando a função
grid_b0 <- seq(0.1, 10, l = 50)
# avaliar
ll(theta = c(log(0.5), -1), inferior = censu$y1, superior = censu$y2, x = x)
ll(theta = c(log(0.5), -0.5), inferior = censu$y1, superior = censu$y2, x = x)
#otimizando numericamente
#colocar ll para retornar o negativo da ll antes
oo <- optim(par = c(1, log(0.5)), fn = ll, inferior = censu$y1,
superior = censu$y2, x = x, hessian = TRUE)
#otimizando numericamente
#colocar ll para retornar o negativo da ll antes
oo <- optim(par = c(1, -3), fn = ll, inferior = censu$y1,
superior = censu$y2, x = x, hessian = TRUE)
#hessian são os valores das funções score
str(oo)
oo$par
oo$value
oo$convergence
oo$message
oo$hessian
inv_Io <- solve(oo$hessian)
inv_Io
ic_Max <- oo$par + qnorm(0.975)*sqrt(diag(inv_Io))
ic_Min <- oo$par - qnorm(0.975)*sqrt(diag(inv_Io))
cbind(ic_Min, oo$par, ic_Max)
