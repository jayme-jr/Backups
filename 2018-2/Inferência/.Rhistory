x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- rmvnorm(1, mean = mu, sigma = Sigma2)
Y <- as.numeric(Y)
plot(Y ~ x1)
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
std = sqrt(diag(solve(-est$hessian)))
beta <- funciton(X,I,Y,rho,W){
out <- ((solve(t(X)%*%X))%*%(t(X)%*%(I%*%Y))) -rho*((solve(t(X)%*%X))%*%t(X)%*%W%*%Y)
return(out)
}
beta <- funciton(X,I,Y,rho,W){
out <- ((solve(t(X)%*%X))%*%(t(X)%*%(I%*%Y))) -rho*((solve(t(X)%*%X))%*%t(X)%*%W%*%Y)
return(out)
}
require(mvtnorm)
Sigma2 <- as.matrix(Sigma(rho = 0.5, sigma2 = 1, W = W))
Sigma2[1:10,1:10]
x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- rmvnorm(1, mean = mu, sigma = Sigma2)
Y <- as.numeric(Y)
plot(Y ~ x1)
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
Beta0 <- est[1,1]
Beta0 <- est[1]
est[1]
Beta0 <- est[1,[1,1]]
Beta0 <- est[1,[1,1]]
est[[1]]
Beta0 <- est[[1],,1]
Beta0 <- est[[1],[1,1]]
Beta0 <- est[[1],[1]]
Beta0 <- est[[1]
std = sqrt(diag(solve(-est$hessian)))
#Estimando o vetor de betas
beta <- funciton(X,I,Y,rho,W){
out <- ((solve(t(X)%*%X))%*%(t(X)%*%(I%*%Y))) -rho*((solve(t(X)%*%X))%*%t(X)%*%W%*%Y)
return(out)
}
Beta0 <- est[[1]]
est[[1]]
Beta0 <- est$par[,1]
est$par[,1]
est$par[1]
Beta1 <- est$par[2]
rho_hat <- est$par[3]
rho_hat
Beta0_hat <- est$par[1]
Beta1_hat <- est$par[2]
rho_hat <- est$par[3]
sigma2_hat <- est$par[4]
std = sqrt(diag(solve(-est$hessian)))
std
beta <- funciton(X,I,Y,rho,W){
out <- ((solve(t(X)%*%X))%*%(t(X)%*%(I%*%Y))) -rho*((solve(t(X)%*%X))%*%t(X)%*%W%*%Y)
return(out)
}
beta <- funciton(X,I,Y,rho,W){
out <- ((solve(t(X)%*%X))%*%(t(X)%*%(I%*%Y))) -rho*((solve(t(X)%*%X))%*%t(X)%*%W%*%Y)
return(out)
}
plot(Y ~ x1)
Sigma2[1:10,1:10]
matriz
matriz = cell2nb(nrow=10,ncol=10,type="rook")
W = nb2mat(matriz)
matriz
W
W = nb2mat(matriz)
B <- rho*W
install.packages("spdep")
install.packages("spdep")
require(spdep)
nb <- cell2nb(nrow = 10, ncol = 10)
matriz = cell2nb(nrow=10,ncol=10,type="rook")
matriz = cell2nb(nrow=10,ncol=10,type="rook")
W = nb2mat(matriz)
Sigma <- function(rho, sigma2, W) {
I <- diag(rep(1,ncol(W)))
B <- rho*W
p1 <- solve( (I - B) )
p2 <- solve( (I - t(B)) )
out <- sigma2*(p1%*%p2)
return(out)
}
require(mvtnorm)
Sigma2 <- as.matrix(Sigma(rho = 0.5, sigma2 = 1, W = W))
x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- as.numeric(rmvnorm(1, mean = mu, sigma = Sigma2))
plot(Y ~ x1)
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
#out <- -(p/2)*log(2*pi) - 0.5*det(Sigma2, log = TRUE) -
#  (1/2)* t(Y)%*%solve(Sigma2)%*%Y
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
Beta0_hat <- est$par[1]
Beta1_hat <- est$par[2]
rho_hat <- est$par[3]
sigma2_hat <- est$par[4]
std = sqrt(diag(solve(-est$hessian)))
std = sqrt(diag(solve(-est$hessian)))
setwd("D:/Programas/Documentos/Estatística/Inferência")
install.packages("spdep")
require(spdep)
nb <- cell2nb(nrow = 10, ncol = 10)
matriz = cell2nb(nrow=10,ncol=10,type="rook")
W = nb2mat(matriz)
Sigma <- function(rho, sigma2, W) {
I <- diag(rep(1,ncol(W)))
B <- rho*W
p1 <- solve( (I - B) )
p2 <- solve( (I - t(B)) )
out <- sigma2*(p1%*%p2)
return(out)
}
Sigma2 <- as.matrix(Sigma(rho = 0.5, sigma2 = 1, W = W))
x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- as.numeric(rmvnorm(1, mean = mu, sigma = Sigma2))
require(mvtnorm)
Y <- as.numeric(rmvnorm(1, mean = mu, sigma = Sigma2))
plot(Y ~ x1)
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
#out <- -(p/2)*log(2*pi) - 0.5*det(Sigma2, log = TRUE) -
#  (1/2)* t(Y)%*%solve(Sigma2)%*%Y
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
Beta0_hat <- est$par[1]
Beta1_hat <- est$par[2]
rho_hat <- est$par[3]
sigma2_hat <- est$par[4]
std = sqrt(diag(solve(-est$hessian)))
plot est
plot (est)
plot (est$par)
plot (est$par[1])
plot (est$par[2])
plot (est$par[3]~est$par[4])
plot (est$par[3]~est$par[4])
est
plot (est$par[3]~est$par[4])
std = sqrt(diag(solve(-est$hessian)))
std
plot(std)
require(spdep)
require(mvtnorm)
nb <- cell2nb(nrow = 10, ncol = 10)
matriz = cell2nb(nrow=10,ncol=10,type="rook")
W = nb2mat(matriz)
Sigma <- function(rho, sigma2, W) {
I <- diag(rep(1,ncol(W)))
B <- rho*W
p1 <- solve( (I - B) )
p2 <- solve( (I - t(B)) )
out <- sigma2*(p1%*%p2)
return(out)
}
Sigma2 <- as.matrix(Sigma(rho = 0.5, sigma2 = 1, W = W))
x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- as.numeric(rmvnorm(1, mean = mu, sigma = Sigma2))
plot(Y ~ x1)
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
#out <- -(p/2)*log(2*pi) - 0.5*det(Sigma2, log = TRUE) -
#  (1/2)* t(Y)%*%solve(Sigma2)%*%Y
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
Beta0_hat <- est$par[1]
Beta1_hat <- est$par[2]
rho_hat <- est$par[3]
sigma2_hat <- est$par[4]
std = sqrt(diag(solve(-est$hessian)))
std = sqrt(diag(solve(-est$hessian)))
hessian
std
std
rho_hat <- est$par[3]
std
Zn <- (rho_hat - rho_0)/(std[3])
rho_0 <- 0
Zn <- (rho_hat - rho_0)/(std[3])
Zn
I_o <- (-est$hessian)
I_o
std = sqrt(diag(solve(I_o)))
std
I_o <- (-est$hessian)
I_o
var = sqrt(diag(solve(I_o)))
var
Zn <- (rho_hat - rho_0)/(var[3])
Zn
I_o
V <- sqrt(diag(solve(I_o)))
Zn <- (rho_hat - rho_0)/(V[3])
Zn
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
#out <- -(p/2)*log(2*pi) - 0.5*det(Sigma2, log = TRUE) -
#  (1/2)* t(Y)%*%solve(Sigma2)%*%Y
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
out
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
out <- (-1/2)(p*log(2*pi)+log(abs(Sigma)))
mu <- beta0 + beta1*x1
#out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
out <- (-1/2)(p*log(2*pi)+log(Sigma))
mu <- beta0 + beta1*x1
#out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
out <- (-1/2)(p*log(2*pi)+log(sigma2))
mu <- beta0 + beta1*x1
#out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
out <- (-1/2)(p*log(2*pi)+log((-1)%%sigma2))
out <- (-1/2)(p*log(2*pi)+log((-1)%%sigma2))
sigma2
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
out <- (-1/2)(p*log(2*pi)+log((-1)%%sigma2))
mu <- beta0 + beta1*x1
#out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
beta0 <- par[1]
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
out <- (-1/2)(p*log(2*pi)+log((-1)%%sigma2))
mu <- beta0 + beta1*x1
#out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
Sigma
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
V
I_o
Zn
inf <- rho_hat - 1,96*V[3]
inf <- rho_hat - 1.96*V[3]
inf
inf <- rho_hat - (1.96*V[3])
sup <- rho_hat + (1.96*V[3])
IC <- c(inf,sup)
IC
nb <- cell2nb(nrow = 10, ncol = 10)
matriz = cell2nb(nrow=10,ncol=10,type="rook")
W = nb2mat(matriz)
Sigma <- function(rho, sigma2, W) {
I <- diag(rep(1,ncol(W)))
B <- rho*W
p1 <- solve( (I - B) )
p2 <- solve( (I - t(B)) )
out <- sigma2*(p1%*%p2)
return(out)
}
Sigma2 <- as.matrix(Sigma(rho = 0.5, sigma2 = 1, W = W))
x1 <- seq(-1,1, l = 100)
mu <- 2 + 3*x1
Y <- as.numeric(rmvnorm(1, mean = mu, sigma = Sigma2))
plot(Y ~ x1)
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
lv(par = c(2, 3, 0.5, 1), W = W, Y = Y, x1 = x1)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
Beta0_hat <- est$par[1]
Beta1_hat <- est$par[2]
rho_hat <- est$par[3]
sigma2_hat <- est$par[4]
I_o <- (-est$hessian)
I_o
V <- sqrt(diag(solve(I_o)))
V
rho_0 <- 0
Zn <- (rho_hat - rho_0)/(V[3])
Zn
inf <- rho_hat - (1.96*V[3])
sup <- rho_hat + (1.96*V[3])
IC <- c(inf,sup)
IC
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est
est$par
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
#Verossimilhanca
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
#Log-verossimilhanca
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
#Verossimilhanca
L <- function(Sigma,Y) {
p <- length(Y)
out <- prod( ((2*pi)^(-p/2)) * (1/determinant(Sigma,logarithm=T)) *
exp((-1/2)*Y%*%solve(Sigma)%*%t(Y)) )
return(out)
}
#Log-verossimilhanca
lv <- function(par, W, Y, x1) {
beta0 <- par[1]
beta1 <- par[2]
rho <- par[3]
sigma2 <- par[4]
p <- length(Y)
Sigma2 <- as.matrix(Sigma(rho = rho, sigma2 = sigma2, W = W))
mu <- beta0 + beta1*x1
out <- dmvnorm(x = Y, mean = mu, sigma = Sigma2, log = TRUE)
return(as.numeric(out))
}
est <- optim(par = c(0,0, 0, 1), fn = lv, W = W, Y = Y, x1 = x1,
method = "L-BFGS-B",
lower = c(-Inf, -Inf, -0.99, 0.0001), upper = c(Inf, Inf, 0.99, Inf),
control = list(fnscale = -1), hessian = T)
plot(Y ~ x1)
